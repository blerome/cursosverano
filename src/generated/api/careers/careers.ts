/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ITC Summer
 * ITCancún summer API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetCareers200,
  GetCareersParams
} from '../../model';

import getCareersMutator from '../../../api/http/axios.mutator';




export const getCareers = (
    params?: GetCareersParams,
 signal?: AbortSignal
) => {
      
      
      return getCareersMutator<GetCareers200>(
      {url: `/careers`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetCareersQueryKey = (params?: GetCareersParams,) => {
    return [`/careers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCareersQueryOptions = <TData = Awaited<ReturnType<typeof getCareers>>, TError = unknown>(params?: GetCareersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCareers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCareersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCareers>>> = ({ signal }) => getCareers(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCareers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCareersQueryResult = NonNullable<Awaited<ReturnType<typeof getCareers>>>
export type GetCareersQueryError = unknown


export function useGetCareers<TData = Awaited<ReturnType<typeof getCareers>>, TError = unknown>(
 params: undefined |  GetCareersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCareers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCareers>>,
          TError,
          Awaited<ReturnType<typeof getCareers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCareers<TData = Awaited<ReturnType<typeof getCareers>>, TError = unknown>(
 params?: GetCareersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCareers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCareers>>,
          TError,
          Awaited<ReturnType<typeof getCareers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCareers<TData = Awaited<ReturnType<typeof getCareers>>, TError = unknown>(
 params?: GetCareersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCareers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCareers<TData = Awaited<ReturnType<typeof getCareers>>, TError = unknown>(
 params?: GetCareersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCareers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCareersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



