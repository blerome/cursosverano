/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ITC Summer
 * ITCancún summer API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetSubjects202,
  GetSubjectsParams
} from '../../model';

import getSubjectsMutator from '../../../api/http/axios.mutator';




export const getSubjects = (
    params?: GetSubjectsParams,
 signal?: AbortSignal
) => {
      
      
      return getSubjectsMutator<GetSubjects202>(
      {url: `/subjects`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetSubjectsQueryKey = (params?: GetSubjectsParams,) => {
    return [`/subjects`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSubjectsQueryOptions = <TData = Awaited<ReturnType<typeof getSubjects>>, TError = unknown>(params?: GetSubjectsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubjects>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSubjectsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubjects>>> = ({ signal }) => getSubjects(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSubjects>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSubjectsQueryResult = NonNullable<Awaited<ReturnType<typeof getSubjects>>>
export type GetSubjectsQueryError = unknown


export function useGetSubjects<TData = Awaited<ReturnType<typeof getSubjects>>, TError = unknown>(
 params: undefined |  GetSubjectsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubjects>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubjects>>,
          TError,
          Awaited<ReturnType<typeof getSubjects>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSubjects<TData = Awaited<ReturnType<typeof getSubjects>>, TError = unknown>(
 params?: GetSubjectsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubjects>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubjects>>,
          TError,
          Awaited<ReturnType<typeof getSubjects>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSubjects<TData = Awaited<ReturnType<typeof getSubjects>>, TError = unknown>(
 params?: GetSubjectsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubjects>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSubjects<TData = Awaited<ReturnType<typeof getSubjects>>, TError = unknown>(
 params?: GetSubjectsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubjects>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSubjectsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



