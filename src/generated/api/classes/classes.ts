/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ITC Summer
 * ITCancún summer API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateClassDto,
  EnrollStudentClassDto,
  GetClassesParams,
  PaginatedResponseDtoClassResponseDto,
  PostClassesEnrollStudent202Item0,
  PostClassesEnrollStudent202Item1,
  ResponseDtoCreatedClassResponseDto
} from '../../model';

import getClassesMutator from '../../../api/http/axios.mutator';
import postClassesMutator from '../../../api/http/axios.mutator';
import postClassesEnrollStudentMutator from '../../../api/http/axios.mutator';




export const getClasses = (
    params?: GetClassesParams,
 signal?: AbortSignal
) => {
      
      
      return getClassesMutator<PaginatedResponseDtoClassResponseDto>(
      {url: `/classes`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetClassesQueryKey = (params?: GetClassesParams,) => {
    return [`/classes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetClassesQueryOptions = <TData = Awaited<ReturnType<typeof getClasses>>, TError = unknown>(params?: GetClassesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClasses>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClassesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClasses>>> = ({ signal }) => getClasses(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClasses>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClassesQueryResult = NonNullable<Awaited<ReturnType<typeof getClasses>>>
export type GetClassesQueryError = unknown


export function useGetClasses<TData = Awaited<ReturnType<typeof getClasses>>, TError = unknown>(
 params: undefined |  GetClassesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClasses>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClasses>>,
          TError,
          Awaited<ReturnType<typeof getClasses>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClasses<TData = Awaited<ReturnType<typeof getClasses>>, TError = unknown>(
 params?: GetClassesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClasses>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClasses>>,
          TError,
          Awaited<ReturnType<typeof getClasses>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClasses<TData = Awaited<ReturnType<typeof getClasses>>, TError = unknown>(
 params?: GetClassesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClasses>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetClasses<TData = Awaited<ReturnType<typeof getClasses>>, TError = unknown>(
 params?: GetClassesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClasses>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetClassesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postClasses = (
    createClassDto: CreateClassDto,
 signal?: AbortSignal
) => {
      
      
      return postClassesMutator<ResponseDtoCreatedClassResponseDto>(
      {url: `/classes`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createClassDto, signal
    },
      );
    }
  


export const getPostClassesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClasses>>, TError,{data: CreateClassDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postClasses>>, TError,{data: CreateClassDto}, TContext> => {

const mutationKey = ['postClasses'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClasses>>, {data: CreateClassDto}> = (props) => {
          const {data} = props ?? {};

          return  postClasses(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClassesMutationResult = NonNullable<Awaited<ReturnType<typeof postClasses>>>
    export type PostClassesMutationBody = CreateClassDto
    export type PostClassesMutationError = unknown

    export const usePostClasses = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClasses>>, TError,{data: CreateClassDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postClasses>>,
        TError,
        {data: CreateClassDto},
        TContext
      > => {

      const mutationOptions = getPostClassesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postClassesEnrollStudent = (
    enrollStudentClassDto: EnrollStudentClassDto,
 signal?: AbortSignal
) => {
      
      
      return postClassesEnrollStudentMutator<[PostClassesEnrollStudent202Item0, PostClassesEnrollStudent202Item1]>(
      {url: `/classes/enrollStudent`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: enrollStudentClassDto, signal
    },
      );
    }
  


export const getPostClassesEnrollStudentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClassesEnrollStudent>>, TError,{data: EnrollStudentClassDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postClassesEnrollStudent>>, TError,{data: EnrollStudentClassDto}, TContext> => {

const mutationKey = ['postClassesEnrollStudent'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClassesEnrollStudent>>, {data: EnrollStudentClassDto}> = (props) => {
          const {data} = props ?? {};

          return  postClassesEnrollStudent(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClassesEnrollStudentMutationResult = NonNullable<Awaited<ReturnType<typeof postClassesEnrollStudent>>>
    export type PostClassesEnrollStudentMutationBody = EnrollStudentClassDto
    export type PostClassesEnrollStudentMutationError = unknown

    export const usePostClassesEnrollStudent = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClassesEnrollStudent>>, TError,{data: EnrollStudentClassDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postClassesEnrollStudent>>,
        TError,
        {data: EnrollStudentClassDto},
        TContext
      > => {

      const mutationOptions = getPostClassesEnrollStudentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    