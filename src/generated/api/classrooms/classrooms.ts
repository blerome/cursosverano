/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ITC Summer
 * ITCancún summer API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ClassroomResponseDto,
  GetClassroomsBuildings200Item,
  GetClassroomsParams
} from '../../model';

import getClassroomsMutator from '../../../api/http/axios.mutator';
import getClassroomsBuildingsMutator from '../../../api/http/axios.mutator';




export const getClassrooms = (
    params?: GetClassroomsParams,
 signal?: AbortSignal
) => {
      
      
      return getClassroomsMutator<ClassroomResponseDto[]>(
      {url: `/classrooms`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetClassroomsQueryKey = (params?: GetClassroomsParams,) => {
    return [`/classrooms`, ...(params ? [params]: [])] as const;
    }

    
export const getGetClassroomsQueryOptions = <TData = Awaited<ReturnType<typeof getClassrooms>>, TError = unknown>(params?: GetClassroomsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClassrooms>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClassroomsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClassrooms>>> = ({ signal }) => getClassrooms(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClassrooms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClassroomsQueryResult = NonNullable<Awaited<ReturnType<typeof getClassrooms>>>
export type GetClassroomsQueryError = unknown


export function useGetClassrooms<TData = Awaited<ReturnType<typeof getClassrooms>>, TError = unknown>(
 params: undefined |  GetClassroomsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClassrooms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClassrooms>>,
          TError,
          Awaited<ReturnType<typeof getClassrooms>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClassrooms<TData = Awaited<ReturnType<typeof getClassrooms>>, TError = unknown>(
 params?: GetClassroomsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClassrooms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClassrooms>>,
          TError,
          Awaited<ReturnType<typeof getClassrooms>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClassrooms<TData = Awaited<ReturnType<typeof getClassrooms>>, TError = unknown>(
 params?: GetClassroomsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClassrooms>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetClassrooms<TData = Awaited<ReturnType<typeof getClassrooms>>, TError = unknown>(
 params?: GetClassroomsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClassrooms>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetClassroomsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getClassroomsBuildings = (
    
 signal?: AbortSignal
) => {
      
      
      return getClassroomsBuildingsMutator<GetClassroomsBuildings200Item[]>(
      {url: `/classrooms/buildings`, method: 'GET', signal
    },
      );
    }
  

export const getGetClassroomsBuildingsQueryKey = () => {
    return [`/classrooms/buildings`] as const;
    }

    
export const getGetClassroomsBuildingsQueryOptions = <TData = Awaited<ReturnType<typeof getClassroomsBuildings>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClassroomsBuildings>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClassroomsBuildingsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClassroomsBuildings>>> = ({ signal }) => getClassroomsBuildings(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClassroomsBuildings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClassroomsBuildingsQueryResult = NonNullable<Awaited<ReturnType<typeof getClassroomsBuildings>>>
export type GetClassroomsBuildingsQueryError = unknown


export function useGetClassroomsBuildings<TData = Awaited<ReturnType<typeof getClassroomsBuildings>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClassroomsBuildings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClassroomsBuildings>>,
          TError,
          Awaited<ReturnType<typeof getClassroomsBuildings>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClassroomsBuildings<TData = Awaited<ReturnType<typeof getClassroomsBuildings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClassroomsBuildings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClassroomsBuildings>>,
          TError,
          Awaited<ReturnType<typeof getClassroomsBuildings>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClassroomsBuildings<TData = Awaited<ReturnType<typeof getClassroomsBuildings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClassroomsBuildings>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetClassroomsBuildings<TData = Awaited<ReturnType<typeof getClassroomsBuildings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClassroomsBuildings>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetClassroomsBuildingsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



