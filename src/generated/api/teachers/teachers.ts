/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * ITC Summer
 * ITCancún summer API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  PostTeachers201,
  PostTeachersParams
} from '../../model';

import postTeachersMutator from '../../../api/http/axios.mutator';




export const postTeachers = (
    params: PostTeachersParams,
 signal?: AbortSignal
) => {
      
      
      return postTeachersMutator<PostTeachers201>(
      {url: `/teachers`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getPostTeachersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTeachers>>, TError,{params: PostTeachersParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postTeachers>>, TError,{params: PostTeachersParams}, TContext> => {

const mutationKey = ['postTeachers'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTeachers>>, {params: PostTeachersParams}> = (props) => {
          const {params} = props ?? {};

          return  postTeachers(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTeachersMutationResult = NonNullable<Awaited<ReturnType<typeof postTeachers>>>
    
    export type PostTeachersMutationError = unknown

    export const usePostTeachers = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTeachers>>, TError,{params: PostTeachersParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postTeachers>>,
        TError,
        {params: PostTeachersParams},
        TContext
      > => {

      const mutationOptions = getPostTeachersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    